package com.jlsoft.o2o.qxgl.service;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.jlsoft.framework.JLBill;
import com.jlsoft.framework.dataset.DataSet;
import com.jlsoft.utils.JLTools;
import com.jlsoft.utils.PubFun;
import com.sun.imageio.plugins.common.I18N;
@Controller
@RequestMapping("/Oper_FSFW")
public class Oper_FSFW extends JLBill{
	
	private int length1;


	/**
	 * 插入生产企业的辐射区域范围
	 * 2015/12/14
	 * NineDragon
	 * @param
	 * 		array:区域代码
	 * 		zcxx01:公司id
	 * 		type:  经销企业品牌未入驻时：自行分配的销售区域 type 字段为1   生产企业和物流为0
	 * 		lx: 1表示物流  0 表示生产企业或者经销
	 * 		t : 0表示虚拟仓库  1表示：实体仓库
	 * @throws Exception
	 */
	@RequestMapping("/insert_SCFSFW.action")
	public Map<String, Object> insert_SCFSFW(String XmlData) throws Exception{
		cds=new DataSet(XmlData);
		String[] QYFW = cds.getField("array", 0).split(",");
		String zcxx01 = cds.getField("zcxx01", 1);
		String type = cds.getField("type", 2);//0 表示物流和生产  1表示经销
		String t = cds.getField("t", 4);// 0表示虚拟仓库  1表示：实体仓库
		Map<String, Object> map=new HashMap<String, Object>();
		try {
			String sql ="DELETE FROM w_dqck WHERE ck01 = (SELECT b.ck01 FROM w_gsck a LEFT JOIN ck b ON a.ck01=b.ck01 WHERE a.zcxx01='"+zcxx01+"' AND b.ck09=0 AND b.type='"+t+"')  AND type='"+type+"' ";
			Map row = getRow(sql, null, 0);
			int i = execSQL(o2o, sql, row);
			
			int i1=0;
			if(QYFW.length>0){
				for(int j=0 ; j<QYFW.length ; j++){
			        String s = new String(QYFW[j]);   
			        String a[] = s.split("-");  
			        String dqxx01 = a[0];
			        String dqxx02 = a[1];
			        
			        // 判断是否省级单位
			        List<String> Nlist = new ArrayList<String>();
			        if("0000".equals(dqxx01.substring(2))){
						String citySql = "SELECT a.DQBZM01 DQXX01, CONCAT (b.dqbzm02,a.DQBZM02)DQBZM02   "
									+ "FROM DQBZM a  LEFT JOIN DQBZM b ON a. dqbzm_dqbzm01=b.dqbzm01   WHERE a.DQBZM_DQBZM01 = '" + dqxx01 +  "' "
									+ "AND a.DQBZM03 = 2 ORDER BY a.DQBZM01";
						List cList = queryForList(o2o, citySql);
						for (int Nj = 0; Nj < cList.size(); Nj++){
							 Map Nmap = (Map)cList.get(Nj);
							 String Ns =  (String) Nmap.get("DQXX01");
							 String Nss =  (String) Nmap.get("DQBZM02");
							 String N = Ns+"-"+Nss;
							 Nlist.add(N);
						}
						 for (int n = 0; n < Nlist.size(); n++) {
						        String ss = new String(Nlist.get(n));   
						        String as[] = ss.split("-");  
						        String dq01 = as[0];
						        String dq02 = as[1];
							String  NSQL = "INSERT INTO w_dqck(dqxx01,ck01,dqxx02,ck02,type) VALUES ('"+dq01+"',(SELECT b.ck01 FROM w_gsck a LEFT JOIN ck b ON a.ck01=b.ck01 WHERE a.zcxx01='"+zcxx01+"' AND b.ck09=0 AND b.type='"+t+"'),'"+dq02+"',(SELECT b.ck02 FROM w_gsck a LEFT JOIN ck b ON a.ck01=b.ck01 WHERE a.zcxx01='"+zcxx01+"' AND b.ck09=0 AND b.type='"+t+"'),'"+type+"')";
								Map Nrow = getRow(NSQL, null, 0);
								i1+=execSQL(o2o, NSQL, Nrow);
						 }
					}else{
						//省份单位
						String sql1="INSERT INTO w_dqck(dqxx01,ck01,dqxx02,ck02,type) VALUES ('"+dqxx01+"',(SELECT b.ck01 FROM w_gsck a LEFT JOIN ck b ON a.ck01=b.ck01 WHERE a.zcxx01='"+zcxx01+"' AND b.ck09=0 AND b.type='"+t+"'),'"+dqxx02+"',(SELECT b.ck02 FROM w_gsck a LEFT JOIN ck b ON a.ck01=b.ck01 WHERE a.zcxx01='"+zcxx01+"' AND b.ck09=0 AND b.type='"+t+"'),'"+type+"')";
						System.out.println(sql1);
						Map row1 = getRow(sql1, null, 0);
						i1+=execSQL(o2o, sql1, row1);
						
					}
				}
			}
			
			//判断插入的是物流企业    1表示物流 
			String lx = cds.getField("lx", 3);
			if(lx.equals("1")){
				//物流企业的辐射范围进行修改时，需要全部更新修改状态
				
				//重复的状态 赋予状态为1**************************
				List<String> Nlists = new ArrayList<String>();
				String citySqls = "SELECT dqxx01 FROM w_dqck WHERE TYPE='2' AND dqxx01  IN (SELECT dqxx01 FROM  w_dqck WHERE ck01=(SELECT b.ck01 FROM w_gsck a LEFT JOIN ck b ON a.ck01=b.ck01 WHERE a.zcxx01='"+zcxx01+"' AND b.ck09=0 AND b.type='"+t+"'))";
				List cLists = queryForList(o2o, citySqls);
				for (int Njs = 0; Njs < cLists.size(); Njs++){
					 Map Nmap = (Map)cLists.get(Njs);
					 String Ns =  (String) Nmap.get("dqxx01");
					 Nlists.add(Ns);
				}
				for (int n = 0; n < Nlists.size(); n++) {
			        String ss = new String(Nlists.get(n)); 
			        System.out.println(ss);
			        String  NSQLs = "UPDATE w_dqck SET STATUS='1' WHERE dqxx01='"+ss+"' AND TYPE='2'";
			        Map Nrows = getRow(NSQLs, null, 0);
			        i1+=execSQL(o2o, NSQLs, Nrows); 
				}
				
				//不重复的状态 赋予状态为0**************************
				List<String> Nlistss = new ArrayList<String>();
				String citySqlss = "SELECT dqxx01 FROM w_dqck WHERE TYPE='2' AND dqxx01 NOT IN (SELECT dqxx01 FROM  w_dqck WHERE ck01=(SELECT b.ck01 FROM w_gsck a LEFT JOIN ck b ON a.ck01=b.ck01 WHERE a.zcxx01='"+zcxx01+"' AND b.ck09=0 AND b.type='"+t+"'))";
				List cListss = queryForList(o2o, citySqlss);
				for (int Njss = 0; Njss < cListss.size(); Njss++){
					 Map Nmaps = (Map)cListss.get(Njss);
					 String Nsss =  (String) Nmaps.get("dqxx01");
					 Nlistss.add(Nsss);
				}
				for (int nsss = 0; nsss < Nlistss.size(); nsss++) {
			        String sss = new String(Nlistss.get(nsss)); 
			        System.out.println(sss);
			        String  NSQLss = "UPDATE w_dqck SET STATUS='0' WHERE dqxx01='"+sss+"' AND TYPE='2'";
			        Map Nrowss = getRow(NSQLss, null, 0);
			        i1+=execSQL(o2o, NSQLss, Nrowss); 
				}
				
			}
			
			if (i1 > 0) {
				map.put("STATE", "0");
			} else {
				map.put("STATE", "1");
			}
		} catch (Exception e) {
			map.put("STATE", "1");
		}
		return map;
	}
	
	
	/**
	 * 
	 * 前提条件：ck表  type为0的虚拟仓库  必须保证一个公司下只有一个虚拟仓库
	 * http://localhost:8088/Oper_FSFW/insert_test.action?XmlData=[{"in":"in"}]
	 * 
	 */
	@RequestMapping("/insert_test.action")
	public Map<String, Object> insert_test(String XmlData) throws Exception{
		cds=new DataSet(XmlData);
		Map<String, Object> map=new HashMap<String, Object>();
		int i1=0;
		try {
			//查询之前注册公司的 zcxx01 
			List<String> list_1 = new ArrayList<String>();
			String sql1 = "SELECT zcxx01,zcxx02 FROM w_zcgs WHERE zcgs01=4 AND (zcgs03 =43 OR zcgs03=42)";
			List List1 = queryForList(o2o, sql1);
			for (int j = 0; j < List1.size(); j++){
				 Map map1 = (Map)List1.get(j);
				 String z01 =  (String) map1.get("zcxx01");
				 String z02 =  (String) map1.get("zcxx02");
				 //为空判断
				 if(z01.equals("")|| z01 == null ){
					 continue;
				 }
				 if(z02.equals("")|| z02 == null ){
					 continue;
				 }
				 String z = z01+"-"+z02;
				 list_1.add(z);
			}
			for (int n = 0; n < list_1.size(); n++) {
		        String ss = new String(list_1.get(n));   
		        String as[] = ss.split("-"); 
		        String zcxx01 = as[0];
		        String zcxx02 = as[1];
		        if(zcxx01.equals("0329") ){
		        	System.out.println("sss");
		        }
		        
		        //生成ck01
		        String ck01 = JLTools.getID_X(PubFun.updateWBHZT(o2o, "CK", 1),8);
				System.out.println(ck01);
		        
				//判断之前老数据ck01是否为8位，ture不操作
				String sql8 =" SELECT ck01 FROM w_gsck WHERE zcxx01='"+zcxx01+"' AND CK01=(SELECT ck01 FROM ck WHERE ck09=0 AND TYPE=0 AND gsxx01='"+zcxx01+"')";
				List queryForList = queryForList(o2o, sql8);
				//为空判断 
				int length;
				if(queryForList.size() > 0){
					Map map8 = (Map) queryForList.get(0);
					String ck018 = (String) map8.get("ck01");
				    length = ck018.toString().length();
				}else{
					length =9;
				}
				if(length == 8){
					
				}else{
				
		        //【w_gsck 表插入 数据】
		        //进行判断是否有值：
		        String sql1s = "SELECT zcxx01,CK01 FROM w_gsck WHERE zcxx01='"+zcxx01+"' ";
				List<?> List1s = queryForList(o2o, sql1s);
				int size = List1s.size();
				if(size >0){
					//更新
					//int ck01 = n;//&&&&&&&&&&&&&&&&&&&&&&注释&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
					String  NSQLs = "UPDATE w_gsck SET CK01='"+ck01+"' WHERE zcxx01='"+zcxx01+"' AND CK01=(SELECT ck01 FROM ck WHERE ck09=0 AND TYPE=0 AND gsxx01='"+zcxx01+"')  ";
					Map nrow2 = getRow(NSQLs, null, 0);
			        i1+=execSQL(o2o, NSQLs, nrow2); 
				}else{
					//插入
					//int ck01 = n;//&&&&&&&&&&&&&&&&&&&&&&注释&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
			        String sql2 ="INSERT INTO w_gsck(zcxx01,CK01) VALUES ('"+zcxx01+"','"+ck01+"') ";
					Map row2 = getRow(sql2, null, 0);
					i1 += execSQL(o2o, sql2, row2);
				}
				
				//【ck表中插入数据】
				//进行判断是否有值 
				String sql1ss = "SELECT ck01 FROM ck WHERE gsxx01='"+zcxx01+"' AND ck09=0 AND TYPE=0 ";
				List List1ss = queryForList(o2o, sql1ss);
				int sizes = List1ss.size();
				if(sizes >0){
					//更新
					//int ck01 = n;//&&&&&&&&&&&&&&&&&&&&&&注释&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
					String  NSQLss = "UPDATE ck SET ck01='"+ck01+"' ,ERPDZ='0001010103'  WHERE gsxx01='"+zcxx01+"'AND TYPE='0' ";
					Map nrow2s = getRow(NSQLss, null, 0);
			        i1+=execSQL(o2o, NSQLss, nrow2s);
				}else{
					//插入
					//int ck01 = n;//&&&&&&&&&&&&&&&&&&&&&&注释&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
					String sql3 ="INSERT INTO ck(ck01,ck02,ck09,gsxx01,ERPDZ,TYPE)  VALUES ('"+ck01+"','"+zcxx02+"仓库',0,'"+zcxx01+"','0001010103',0) ";
					Map row3 = getRow(sql3, null, 0);
					i1 += execSQL(o2o, sql3, row3);
				}
				
				//【w_kcxx表插入数据】
				//进行判断是否有值 
				String sql1sss = "SELECT zcxx01,spxx01,ck01 FROM w_kcxx WHERE zcxx01='"+zcxx01+"' AND ck01=03 ";
				List List1sss = queryForList(o2o, sql1sss);
				int sizess = List1sss.size();
				if(sizess >0){
					//更新  
					//int ck01 = n;//&&&&&&&&&&&&&&&&&&&&&&注释&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
					String sql4 ="UPDATE w_kcxx SET ck01='"+ck01+"'   WHERE zcxx01='"+zcxx01+"' AND ck01='03' ";
					Map row4 = getRow(sql4, null, 0);
					i1 += execSQL(o2o, sql4, row4);
				}else{
					//插入
					//无需操作：说明该企业没有发布商品。
				}
		        
				
				//往  w_dqck增加默认数据 --- dqxx01=120100 
				//判断zcxx01 是生产还是经销企业  43生产  42经销
				String sqllx = "SELECT zcgs03 FROM w_zcgs WHERE zcxx01='"+zcxx01+"'";
				List Listlx = queryForList(o2o, sqllx);
				 Map maplx = (Map)Listlx.get(0);
				 Integer zcgslx =  (Integer) maplx.get("zcgs03");
				 System.out.println(zcgslx);
		        if(zcgslx ==43){
		        	//生产
		        	//判断w_dqck表中是否有天津仓库的数据
		        	String sqltj ="SELECT ck01 FROM w_dqck WHERE ck01=(SELECT ck01 FROM ck WHERE gsxx01='"+zcxx01+"' AND TYPE='0') AND dqxx01='120100'";
		        	List Listtj = queryForList(o2o, sqltj);
		        	int sizetj = Listtj.size();
		        	if(sizetj > 0){
		        		//不插入
		        	}else{
		        		String insertDqckSql = "INSERT INTO w_dqck (dqxx01, ck01, ck02, dqxx02, type, status) VALUES ('120100','"+ck01+"', '"+zcxx02+"仓库',"+"'天津天津市', 0, 0)";
						Map row = getRow(insertDqckSql, null, 0);
						i1 += execSQL(o2o, insertDqckSql, row);	
						System.out.println("insert into w_dqck: "+ ck01);
		        	}
		        }else{
		        	//经销
		        	//判断w_dqck表中是否有天津仓库的数据
		        	String sqltj ="SELECT ck01 FROM w_dqck WHERE ck01=(SELECT ck01 FROM ck WHERE gsxx01='"+zcxx01+"' AND TYPE='0') AND dqxx01='120100'";
		        	List Listtj = queryForList(o2o, sqltj);
		        	int sizetj = Listtj.size();
		        	if(sizetj > 0){
		        		//不插入
		        	}else{
		        		String insertDqckSql = "INSERT INTO w_dqck (dqxx01, ck01, ck02, dqxx02, type, status) VALUES ('120100','"+ck01+"', '"+zcxx02+"仓库',"+"'天津天津市', 1, 0)";
						Map row = getRow(insertDqckSql, null, 0);
						i1 += execSQL(o2o, insertDqckSql, row);	
						System.out.println("insert into w_dqck: "+ ck01);
		        	}
		        	
		        }
				}
			}
			if (i1 > 0) {
				map.put("STATE", "成功");
			} else {
				map.put("STATE", "失败");
			}
		} catch (Exception e) {
			e.getStackTrace();
			map.put("STATE", "失败");
		}
		return map;
	}
	
}