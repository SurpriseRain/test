package com.jlsoft.o2o.product.service;

import java.util.HashMap;
import java.util.Map;

import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestMapping;

import com.jlsoft.framework.JLBill;
import com.jlsoft.framework.dataset.DataSet;

/**
 * 商品库存查询等功能 2015-12-15 上午10:38:57
 * 
 * @author Uktar
 * 
 */
@Service("productQueryService")
@RequestMapping("/productQueryService")
public class ProductQueryService extends JLBill {

	/**
	 * 查询库存
	 * 
	 * @param XmlData
	 * @return 2015-12-15 上午11:19:40
	 */
	@RequestMapping("/queryStockNum.action")
	public Map<String, Object> queryStockNum(String XmlData) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		if (XmlData == null) {
			map.put("STATE", "0");
			return map;
		}

		cds = new DataSet(XmlData);
		// 主体ID
		String ztid = cds.getField("ZCXX01", 0);
		// 区域id
		String dqxx01 = cds.getField("DQXX01", 0);
		// 商品id
		String spxx01 = cds.getField("SPXX01", 0);
		// 品牌id
		String ppb01 = cds.getField("PPB01", 0);

		// 检查参数
		if (ztid == null || dqxx01 == null || spxx01 == null || ppb01 == null) {
			map.put("STATE", "0");
			return map;
		}

		// 检查品牌是否入驻,判断主体id
		Map<?, ?> brandMap = this.queryEnteringBrand(XmlData);
		if (brandMap != null && brandMap.size() > 0) {
			// 如果已经入驻，获取主体ID
			ztid = queryOrderZtid(XmlData);
		}

		// 查询库存信息
		map = queryStockNumByParam(ztid, dqxx01, spxx01);
		map.put("STATE", "1");
		return map;
	}




	/**
	 * 根据主体ID及品牌ID查询品牌是否入驻
	 * 
	 * @param XmlData
	 * @return 2015-12-15 上午10:45:59
	 */
	@SuppressWarnings("unchecked")
	public Map<String, Object> queryEnteringBrand(String XmlData)
			throws Exception {
		// 如果只是库存查询使用，下边的参数检查可以去掉
		Map<String, Object> map = new HashMap<String, Object>();
		if (XmlData == null) {
			return map;
		}

		cds = new DataSet(XmlData);
		// 主体ID
		String ztid = cds.getField("ZCXX01", 0);
		// 品牌id
		String ppb01 = cds.getField("PPB01", 0);
		// 商品ID
		String spxx01 = cds.getField("SPXX01", 0);
		
		// 检查参数
		if (ztid == null || spxx01 == null) {
			return map;
		}
		//如果没有传入品牌，根据商品信息查询品牌
		if (ppb01 == null || "".equals(ppb01)) {			
			ppb01 = queryBrandBySpxx(spxx01);
		}


		// 查询品牌是否入驻
		String querySql = "select ZTID, HBID, PPB01 from w_gsgxpp where ZTID ='"
				+ ztid + "' and PPB01='" + ppb01 + "'";
		map = queryForMap(o2o, querySql);

		return map;
	}




	/**
	 * 确定订单的主体ID
	 * 
	 * @param XmlData
	 * @return 2015-12-15 上午11:28:40
	 */
	@SuppressWarnings("unchecked")
	public String queryOrderZtid(String XmlData) throws Exception {

		// 如果只是库存查询使用，下边的参数检查可以去掉
		String ztid = "";
		if (XmlData == null) {
			return ztid;
		}

		cds = new DataSet(XmlData);
		// 主体ID
		ztid = cds.getField("ZCXX01", 0);
		// 区域id
		String dqxx01 = cds.getField("DQXX01", 0);
		// 检查参数
		if (ztid == null || dqxx01 == null) {
			return ztid;
		}
		// 查询上级区域代码
		String areaCode = "";
		String queryAreaSql = "select dqbzm_dqbzm01 from dqbzm where dqbzm01='"
				+ dqxx01 + "'";
		
		Map<String, Object> areaMap = queryForMap(o2o, queryAreaSql);
		if (areaMap !=null && areaMap.size() > 0) {
			Object obj = areaMap.get("dqbzm_dqbzm01");
			if (obj != null) {
				areaCode = obj.toString();
			}
		}

		// 根据主体ID和区域ID能查询出伙伴id,如果没有记录，主体为生产企业
		String querySql = "select HBID from w_gsgxqy where ztid='" + ztid
				+ "' and DQBZM01='" + dqxx01 + "'";
		//加入市级及省级查询条件
		if (areaCode.length() == 0) {
			querySql = querySql + " and DQBZM01='" + dqxx01 + "'";
		}
		else {
			querySql = querySql + " and (DQBZM01='" + dqxx01 + "' or DQBZM01='"
					+ areaCode + "')";
		}

		Map<String, Object> map = queryForMap(o2o, querySql);
		if (map!=null && map.size() > 0) {
			Object obj = map.get("HBID");
			if (obj != null) {
				ztid = obj.toString();
			}
		}
		return ztid;
	}




	/**
	 * 查询库存
	 * 
	 * @param ztid 主体id
	 * @param dqxx01 区域id
	 * @param spxx01 商品id
	 * @return
	 * @throws Exception 2015-12-15 下午1:29:46
	 */
	@SuppressWarnings("unchecked")
	private Map<String, Object> queryStockNumByParam(String ztid,
			String dqxx01, String spxx01) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();

		String querySql = "SELECT sp.SPXX04,sum( K.CKSP04 + K.CKSP05 + K.KCXX01 - K.KCXX02 ) number "
				+ " FROM W_KCXX K LEFT JOIN "
				+ " (SELECT dqck.ck01 from w_dqck dqck LEFT JOIN ck ON dqck.ck01= ck.ck01 WHERE dqck.dqxx01='"
				+ dqxx01
				+ "' and dqck.status=0 and ck.ck09=0) a"
				+ " ON K.ck01 = a.ck01 "
				+ " LEFT JOIN W_SPXX sp ON K.spxx01 = sp.spxx01"
				+ " WHERE K.SPXX01='"
				+ spxx01
				+ "' AND K.ZCXX01='"
				+ ztid
				+ "'";

		map = queryForMap(o2o, querySql);
		return map;
	}




	/**
	 * 获取商品的品牌
	 * @param spxx01 商品ID
	 * @return 2015-12-16 上午10:56:22
	 */
	@SuppressWarnings("unchecked")
	private String queryBrandBySpxx(String spxx01) {
		String brand = "";
		if(spxx01 == null){
			return brand;
		}
		String querySql = "select ppb01 from w_spxx where spxx01= '" + spxx01 + "'";
		Map<String, Object> map = queryForMap(o2o, querySql);
		if (map != null && map.size() > 0) {
			Object obj = map.get("ppb01");
			if (obj != null) {
				brand = obj.toString();
			}
		}
		return brand;
	}
}
